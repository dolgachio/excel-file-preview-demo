{"version":3,"sources":["components/WorkbookGrid/GridSelector.jsx","components/WorkbookGrid/x-spreadsheet/ExcelXSpreadSheet.jsx","components/WorkbookGrid/ag-grid/getColumnDefs.js","components/WorkbookGrid/SheetsSelector/SheetsSelector.jsx","components/WorkbookGrid/ag-grid/ExcelAgGrid.jsx","utils/xlsxToJson.js","components/WorkbookGrid/WorkbookGrid.jsx","components/ExcelPreview/ExcelPreview.js"],"names":["GridSelector","gridOptions","onGridOptionChange","selectedGridOptionName","options","reduce","result","option","isSelected","name","radio","key","type","onChange","value","checked","link","className","href","rel","target","radios","push","links","length","ExcelXSpreadSheet","workbook","gridContainerRef","useRef","out","useMemo","SheetNames","forEach","o","rows","Sheet","Sheets","XLSX","utils","sheet_to_json","raw","header","r","i","cells","c","j","text","useEffect","current","innerHTML","mode","showToolbar","view","height","clientHeight","width","clientWidth","Spreadsheet","loadData","ref","getColumnDefs","rowData","columnFields","Set","row","Object","keys","add","columnFieldsArray","Array","from","sort","headerName","valueGetter","node","rowIndex","pinned","map","columnName","field","SheetsSelector","onSheetNameChange","sheetName","SheetsNames","onClick","ExcelAgGrid","useState","setActiveSheetName","useCallback","event","blankrows","cellStyles","xlsxToJson","columnDefs","defaultColDef","GridsEnum","WorkBookGrid","selectGridOptionName","ExcelPreview","setWorkbook","onFileChange","files","file","reader","FileReader","onload","data","Uint8Array","read","SheetName","readAsArrayBuffer","accept"],"mappings":"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","file":"static/js/3.c3b9fe56.chunk.js","sourcesContent":["import React from 'react';\n\nimport './GridSelector.css';\n\n\nfunction GridSelector({ gridOptions, onGridOptionChange, selectedGridOptionName }) {\n\n    let options = gridOptions.reduce((result, option) => {\n        let isSelected = selectedGridOptionName === option.name;\n\n        let radio = (\n        <label key={option.name}>\n            <input type=\"radio\"\n                onChange={onGridOptionChange} \n                name=\"grid-option\" value={option.name} \n                checked={isSelected}/> <b>{option.name}</b>\n        </label>\n        );\n\n        let link = (<a className=\"grid-selector__link\" key={option.name} href={option.link} rel=\"noopener noreferrer\" target=\"_blank\">{option.name}</a>);\n\n        result.radios.push(radio);\n        result.links.push(link);\n\n        return result;\n    }, { radios: [], links: [] });\n\n    return (\n    <div className=\"grid-selector\">\n        <p>\n            We use {options.links.length} different libraries for displaying data. Here you can find links to them: {options.links}.\n        </p>\n        <p>\n            For parsing files we use the <a href=\"https://github.com/SheetJS/sheetjs\" rel=\"noopener noreferrer\" target=\"_blank\">SheetJS</a>\n        </p>\n        \n        {options.radios}\n    </div>\n    )\n};\n\nexport default GridSelector;","import React, { useRef, useMemo, useEffect } from 'react';\n\nimport XLSX from 'xlsx';\nimport Spreadsheet  from 'x-data-spreadsheet';\n\nimport '../../../../node_modules/x-data-spreadsheet/dist/xspreadsheet.css';\n\nimport './ExcelXSpreadSheet.css';\n\nfunction ExcelXSpreadSheet({ workbook }) {\n    let gridContainerRef = useRef(null);\n\n    let out = useMemo(() => {\n        let out = [];\n        workbook.SheetNames.forEach((name) => {\n          let o = { name:name, rows:{} };\n          let Sheet = workbook.Sheets[name];\n          let SheetJson = XLSX.utils.sheet_to_json(Sheet, {raw: false, header:1});\n          \n          SheetJson.forEach((r, i) => {\n            let cells = {};\n            r.forEach(function(c, j) { cells[j] = ({ text: c }); });\n            o.rows[i] = { cells: cells };\n          })\n          out.push(o);\n        });\n        \n        return out;\n    }, [workbook]);\n\n\n    useEffect(() => {\n        let grid;\n        if (!gridContainerRef.current) {\n            return;\n        } \n\n        gridContainerRef.current.innerHTML = '';\n        let options = { \n            mode: 'read',\n            showToolbar: false,\n            view: {\n                height: () => gridContainerRef.current.clientHeight,\n                width: () => gridContainerRef.current.clientWidth,\n            },\n        };\n        \n        grid = new Spreadsheet(gridContainerRef.current, options);\n\n        grid.loadData(out);\n    }, [out]);\n\n    return (\n    <div className=\"excel-x-spreadsheet\">\n        <h2>X-spreadsheet Rendering version</h2>\n    \n        <div ref={gridContainerRef} className=\"excel-x-spreadsheet-grid-container\"></div>\n    </div>\n    );\n}\n\nexport default ExcelXSpreadSheet;","export function getColumnDefs(rowData) {\n    let columnFields = new Set();\n\n    let numbersColumn = {\n        headerName: '',\n        valueGetter(rowData) {\n            return rowData.node.rowIndex;\n        },\n        pinned: true,\n        width: 50\n    }\n\n    rowData.forEach((row) => {\n        let keys = Object.keys(row);\n        keys.forEach((key) => columnFields.add(key));\n    });\n\n    let columnFieldsArray = Array.from(columnFields).sort();\n\n    return [numbersColumn, ...columnFieldsArray.map((columnName) => ({ field: columnName, headerName: columnName }))];\n}","import React, { useMemo } from 'react';\n\nimport './SheetsSelector.css';\n\nfunction SheetsSelector({ SheetNames, onSheetNameChange, sheetName }) {\n    let SheetsNames = useMemo(() => SheetNames\n        .map((name) => (<button \n            className={`sheets-selector__button ${name === sheetName && 'sheets-selector__button_active'}`} \n            key={name} \n            name={name} \n            onClick={onSheetNameChange}>{name}</button>)), \n        [SheetNames, onSheetNameChange, sheetName]);\n\n    return (\n    <div className=\"sheets-selector\">\n        <h2>Sheets: </h2>\n        {SheetsNames}\n    </div>\n    );\n}\n\nexport default SheetsSelector;","import React, { useMemo, useState, useCallback } from 'react';\n\nimport { AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport './ExcelAgGrid.css';\n\nimport { getColumnDefs } from './getColumnDefs';\nimport { xlsxToJson } from '../../../utils/xlsxToJson';\n\nimport SheetsSelector from '../SheetsSelector/SheetsSelector';\n\nfunction ExcelAgGrid({ workbook }) {\n    let [sheetName, setActiveSheetName] = useState(workbook.SheetNames[0]);\n    \n    let Sheet = useMemo(() => {\n        return workbook.Sheets[sheetName];\n    }, [workbook, sheetName]);\n    \n    let onSheetNameChange = useCallback((event) => {\n        let sheetName = event.target.name;\n        setActiveSheetName(sheetName);\n    }, [setActiveSheetName]);\n    \n    let rowData = useMemo(() => xlsxToJson(Sheet), [Sheet]);\n    let columnDefs = useMemo(() => getColumnDefs(rowData), [rowData]);\n    \n    return (\n    <div>\n        <h2>Ag-Grid Rendering version</h2>\n\n        <SheetsSelector SheetNames={workbook.SheetNames} \n            onSheetNameChange={onSheetNameChange}\n            sheetName={sheetName}/>\n\n        <div className=\"excel-ag-grid-container ag-theme-alpine\">\n            <AgGridReact\n                defaultColDef={\n                    {width: 100}\n                }\n                columnDefs={columnDefs}\n                rowData={rowData}>   \n            </AgGridReact> \n        </div>\n    </div>\n    \n    );\n}\n\nexport default ExcelAgGrid;","import XLSX from 'xlsx';\n\nexport function xlsxToJson(Sheet) {\n    let options = {\n        raw: false,\n        header: 'A',\n        blankrows: false,\n        cellStyles: true,\n    }\n\n    return XLSX.utils.sheet_to_json(Sheet, options);\n}","import React, { useState, useCallback } from 'react';\n\nimport './WorkbookGrid.css';\n\nimport GridSelector from './GridSelector';\n\nimport ExcelXSpreadSheet from './x-spreadsheet/ExcelXSpreadSheet';\nimport ExcelAgGrid from './ag-grid/ExcelAgGrid';\n\nlet GridsEnum = {\n    XSpreadSheet: 'x-spreadsheet',\n    AgGrid: 'Ag-Grid',\n}\n\nlet gridOptions = [\n    {\n        name: GridsEnum.XSpreadSheet,\n        link: 'https://github.com/myliang/x-spreadsheet',\n    },\n    {\n        name: GridsEnum.AgGrid,\n        link: 'https://www.ag-grid.com',\n    }\n];\n\nfunction WorkBookGrid({ workbook }) {\n\n    let [selectedGridOptionName, selectGridOptionName] = useState(GridsEnum.XSpreadSheet);\n\n    let onGridOptionChange = useCallback((event) => {\n        selectGridOptionName(event.target.value);\n    }, [selectGridOptionName]);\n\n    return (\n    <div>\n        <GridSelector gridOptions={gridOptions} onGridOptionChange={onGridOptionChange} selectedGridOptionName={selectedGridOptionName} />\n        \n        {selectedGridOptionName === GridsEnum.AgGrid && <ExcelAgGrid workbook={workbook} />}\n        {selectedGridOptionName === GridsEnum.XSpreadSheet && <ExcelXSpreadSheet workbook={workbook} />}\n    </div>\n    );\n}\n\nexport default WorkBookGrid;","import React, { useCallback, useState } from 'react';\n\nimport XLSX from 'xlsx';\n\nimport './ExcelPreview.css';\nimport WorkbookGrid from '../WorkbookGrid/WorkbookGrid';\nimport { getColumnDefs } from '../WorkbookGrid/ag-grid/getColumnDefs';\n\nfunction ExcelPreview() {\n\n    let [workbook, setWorkbook] = useState(null);\n\n    let onFileChange = useCallback((event) => {\n        let files = event.target.files;\n        let [file] = files;\n        \n        let reader = new FileReader();\n        \n        reader.onload = function(event) {\n          let data = new Uint8Array(event.target.result);   \n          let workbook = XLSX.read(data, { type: 'array', cellStyles: true });\n\n          workbook.SheetNames.forEach((SheetName) => {\n              let sheetJSON = XLSX.utils.sheet_to_json(workbook.Sheets[SheetName], { raw: false, header: 'A', blankrows: false, cellStyles: true });\n              getColumnDefs(sheetJSON);\n          });\n\n          setWorkbook(workbook);\n        };\n        reader.readAsArrayBuffer(file);\n    }, [setWorkbook]);\n\n    return (\n    <div className=\"excel-preview\">\n        <p>We support: *.xls, *.xlsx, *.csv files. Please, chose some file for preview.</p>\n\n        <input onChange={onFileChange}\n            accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n            className=\"excel-preview__input-file\" \n            type=\"file\" />\n        \n        {workbook && <WorkbookGrid workbook={workbook}/>}\n    </div>\n    );\n}\n\nexport default ExcelPreview;"],"sourceRoot":""}